// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package conversationalui.actions;

import static java.util.Objects.requireNonNull;
import java.util.List;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import conversationalui.impl.MxLogger;
import conversationalui.impl.ProviderConfigImpl;
import conversationalui.proxies.ProviderConfig;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Adds a new ProviderConfig (or a specialization of such depending on the input entity parameter) to the ChatContext. The passed DeployedModel will be associated to it. The ProviderConfig is set to active/selected only if IsActive is set to "true". In any case, the specified SystemPrompt and ActionMicroflow will be set on the new ProviderConfig.
 */
public class ChatContext_CreateProviderConfig extends CustomJavaAction<IMendixObject>
{
	private IMendixObject __ChatContext;
	private conversationalui.proxies.ChatContext ChatContext;
	private IMendixObject __DeployedModel;
	private genaicommons.proxies.DeployedModel DeployedModel;
	private java.lang.String ProviderConfigSpecialization;
	private java.lang.String ActionMicroflow;
	private java.lang.Boolean IsActive;
	private java.lang.String ProviderName;
	private java.lang.String SystemPrompt;

	public ChatContext_CreateProviderConfig(IContext context, IMendixObject ChatContext, IMendixObject DeployedModel, java.lang.String ProviderConfigSpecialization, java.lang.String ActionMicroflow, java.lang.Boolean IsActive, java.lang.String ProviderName, java.lang.String SystemPrompt)
	{
		super(context);
		this.__ChatContext = ChatContext;
		this.__DeployedModel = DeployedModel;
		this.ProviderConfigSpecialization = ProviderConfigSpecialization;
		this.ActionMicroflow = ActionMicroflow;
		this.IsActive = IsActive;
		this.ProviderName = ProviderName;
		this.SystemPrompt = SystemPrompt;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.ChatContext = this.__ChatContext == null ? null : conversationalui.proxies.ChatContext.initialize(getContext(), __ChatContext);

		this.DeployedModel = this.__DeployedModel == null ? null : genaicommons.proxies.DeployedModel.initialize(getContext(), __DeployedModel);

		// BEGIN USER CODE
		
		try {
		    requireNonNull(ActionMicroflow, "ActionMicroflow is required.");
		    requireNonNull(ChatContext, "ChatContext is required.");
		    requireNonNull(DeployedModel, "DeployedModel is required.");
		    ProviderConfigImpl.validateActionMicroflow(ActionMicroflow);

		    ProviderConfig providerConfig = ProviderConfigImpl.createAndSetProviderConfigSpecialization(getContext(), ProviderConfigSpecialization, ActionMicroflow, ProviderName, DeployedModel, SystemPrompt);

		    updateProviderConfigOnChatContext(providerConfig);
		    
		    return providerConfig.getMendixObject();

		} catch (Exception e) {
		    LOGGER.error(e);
		    return null;
		}
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ChatContext_CreateProviderConfig";
	}

	// BEGIN EXTRA CODE
	
	private static final MxLogger LOGGER = new MxLogger(ChatContext_CreateProviderConfig.class);
	
	private void updateProviderConfigOnChatContext(ProviderConfig providerConfig) throws CoreException {
		List <ProviderConfig> providerConfigList = ChatContext.getChatContext_ProviderConfig();
		providerConfigList.add(providerConfig);
		ChatContext.setChatContext_ProviderConfig(providerConfigList);
		if (IsActive) {
			ChatContext.setChatContext_ProviderConfig_Active(providerConfig);
		}
	}
	
	// END EXTRA CODE
}
