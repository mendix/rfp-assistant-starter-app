// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package genaicommons.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	/**
	 * @deprecated
	 * The default constructor of the Microflows class should not be used.
	 * Use the static microflow invocation methods instead.
	 */
	@java.lang.Deprecated(since = "9.12", forRemoval = true)
	public Microflows() {}

	// These are the microflows for the GenAICommons module
	/**
	 * Can be used to trigger the scheduled event ScE_Usage_Cleanup logic manually.
	 * This is a cleanup of Usage data (token consumption monitor). This microflow is used in the ScE with the same name. This can be toggled on/off in the Mendix Cloud portal per environment. It runs daily at 12:00AM UTC.
	 * See constant @ConversationalUI.Usage_CleanUpAfterDays for more information.
	 */
	public static void aCT_Usage_Cleanup_TriggerScE(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("GenAICommons.ACT_Usage_Cleanup_TriggerScE").withParams(params).execute(context);
	}
	/**
	 * Can be used to trigger the cleanup logic for all Usage records until the current moment manually.
	 */
	public static void aCT_Usage_CleanupAll(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("GenAICommons.ACT_Usage_CleanupAll").withParams(params).execute(context);
	}
	/**
	 * Action can be used to invoke a chat completions API with a request containing a list of (historical) messages comprising the conversation so far. This action is provider agnostic and will execute the microflow that is saved on the object as "Microflow" attribute.
	 * - Request: Contains messages and optional attributes.
	 * - DeployedModel: The DeployedModel entity replaces the Connection entity. It contains the name of the microflow to be executed for the specified model and other information relevant to connect to a model. The OutputModality needs to be Text.
	 */
	public static genaicommons.proxies.Response chatCompletions_WithHistory(IContext context, genaicommons.proxies.Request _request, genaicommons.proxies.DeployedModel _deployedModel)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Request", _request == null ? null : _request.getMendixObject());
		params.put("DeployedModel", _deployedModel == null ? null : _deployedModel.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.ChatCompletions_WithHistory").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.Response.initialize(context, result);
	}
	/**
	 * Microflow can be used to invoke a chat completions API with a simple request where only a single user message is sent. If you want to send multiple historical user or assistant messages, use the Request_ChatCompletions_WithHistory java action from GenAI commons.
	 * Inputs:
	 * - UserPrompt: The input of the user.
	 * - DeployedModel: The DeployedModel entity replaces the Connection entity. It contains the name of the microflow to be executed for the specified model and other information relevant to connect to a model. The OutputModality needs to be Text.
	 * - OptionalRequest: This is an optional object that contains optional attributes and an optional ToolCollection. If no Request is passed, one will be created.
	 * - OptionalFileCollection: An optional collection of files to be sent along with the UserPrompt to use vision or document chat.
	 */
	public static genaicommons.proxies.Response chatCompletions_WithoutHistory(IContext context, genaicommons.proxies.DeployedModel _deployedModel, java.lang.String _userPrompt, genaicommons.proxies.FileCollection _optionalFileCollection, genaicommons.proxies.Request _optionalRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DeployedModel", _deployedModel == null ? null : _deployedModel.getMendixObject());
		params.put("UserPrompt", _userPrompt);
		params.put("OptionalFileCollection", _optionalFileCollection == null ? null : _optionalFileCollection.getMendixObject());
		params.put("OptionalRequest", _optionalRequest == null ? null : _optionalRequest.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.ChatCompletions_WithoutHistory").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.Response.initialize(context, result);
	}
	/**
	 * Create a chunk with only the input text populated.
	 */
	public static genaicommons.proxies.Chunk chunk_Create(IContext context, java.lang.String _inputText)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("InputText", _inputText);
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.Chunk_Create").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.Chunk.initialize(context, result);
	}
	/**
	 * Find a Chunk within a ChunkCollection by the index.
	 */
	public static genaicommons.proxies.Chunk chunk_FindByIndex(IContext context, genaicommons.proxies.ChunkCollection _chunkCollection, java.lang.Long _index)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ChunkCollection", _chunkCollection == null ? null : _chunkCollection.getMendixObject());
		params.put("Index", _index);
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.Chunk_FindByIndex").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.Chunk.initialize(context, result);
	}
	/**
	 * Returns the Chunk itself. Might be useful for import mappings.
	 */
	public static genaicommons.proxies.Chunk chunk_GetSelf(IContext context, genaicommons.proxies.Chunk _chunk)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Chunk", _chunk == null ? null : _chunk.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.Chunk_GetSelf").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.Chunk.initialize(context, result);
	}
	/**
	 * Adds a new Chunk to the ChunkCollection.
	 */
	public static genaicommons.proxies.Chunk chunkCollection_AddChunk(IContext context, java.lang.String _inputText, genaicommons.proxies.ChunkCollection _chunkCollection)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("InputText", _inputText);
		params.put("ChunkCollection", _chunkCollection == null ? null : _chunkCollection.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.ChunkCollection_AddChunk").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.Chunk.initialize(context, result);
	}
	/**
	 * Creates a new ChunkCollection and returns it.
	 */
	public static genaicommons.proxies.ChunkCollection chunkCollection_Create(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.ChunkCollection_Create").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.ChunkCollection.initialize(context, result);
	}
	/**
	 * Casts a list of Chunks (via ChunkCollection) to KnowledgeBaseChunk objects which are returned in a list.
	 */
	public static java.util.List<genaicommons.proxies.KnowledgeBaseChunk> chunkCollection_GetKnowledgeBaseChunkList(IContext context, genaicommons.proxies.ChunkCollection _chunkCollection)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ChunkCollection", _chunkCollection == null ? null : _chunkCollection.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("GenAICommons.ChunkCollection_GetKnowledgeBaseChunkList").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> genaicommons.proxies.KnowledgeBaseChunk.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	/**
	 * Returns the ChunkCollection itself. Might be useful for import mappings.
	 */
	public static genaicommons.proxies.ChunkCollection chunkCollection_GetSelf(IContext context, genaicommons.proxies.ChunkCollection _chunkCollection)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ChunkCollection", _chunkCollection == null ? null : _chunkCollection.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.ChunkCollection_GetSelf").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.ChunkCollection.initialize(context, result);
	}
	/**
	 * Loops over all Chunks in the CHunkCollection and sets the index attribute.
	 */
	public static void chunkCollection_SetIndexOnChunks(IContext context, genaicommons.proxies.ChunkCollection _chunkCollection)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ChunkCollection", _chunkCollection == null ? null : _chunkCollection.getMendixObject());
		Core.microflowCall("GenAICommons.ChunkCollection_SetIndexOnChunks").withParams(params).execute(context);
	}
	/**
	 * Commits a DeployedModel to the database.
	 */
	public static void deployedModel_Commit(IContext context, genaicommons.proxies.DeployedModel _deployedModel)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DeployedModel", _deployedModel == null ? null : _deployedModel.getMendixObject());
		Core.microflowCall("GenAICommons.DeployedModel_Commit").withParams(params).execute(context);
	}
	/**
	 * Deletes a DeployedModel from the database.
	 */
	public static void deployedModel_Delete(IContext context, genaicommons.proxies.DeployedModel _deployedModel)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DeployedModel", _deployedModel == null ? null : _deployedModel.getMendixObject());
		Core.microflowCall("GenAICommons.DeployedModel_Delete").withParams(params).execute(context);
	}
	/**
	 * Validates all attributes of a DeployedModel to check if they are not blank.
	 */
	public static boolean deployedModel_Validate(IContext context, genaicommons.proxies.DeployedModel _deployedModel)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DeployedModel", _deployedModel == null ? null : _deployedModel.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("GenAICommons.DeployedModel_Validate").withParams(params).execute(context);
	}
	/**
	 * Use this microflow to execute a call to the embeddings API for a single string input. The microflow returns an EmbeddingsResponse containing token usage metrics. 
	 * 
	 * Inputs:
	 * - InputText: Input text to create the embedding vector for.
	 * - DeployedModel: The DeployedModel entity replaces the Connection entity. It contains the name of the microflow to be executed for the specified model and other information relevant to connect to a model. The OutputModality needs to be Embeddings.
	 * - EmbeddingOptions (optional): Can be used to specify optional attributes like vector dimensions. Note that not all provider and models may support all embeddings options attributes
	 * 
	 * Output 
	 * - EmbeddingsResponse: This is a response object containing token usage metric and pointing to a ChunkCollection. The ChunkCollection contains the chunk for which an embedding vector was created. In order to retrieve the generated vector, "Embeddings: Get First Vector from Response" can be used.
	 */
	public static genaicommons.proxies.EmbeddingsResponse embeddings_String(IContext context, genaicommons.proxies.DeployedModel _deployedModel, java.lang.String _inputText, genaicommons.proxies.EmbeddingsOptions _embeddingsOptions)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DeployedModel", _deployedModel == null ? null : _deployedModel.getMendixObject());
		params.put("InputText", _inputText);
		params.put("EmbeddingsOptions", _embeddingsOptions == null ? null : _embeddingsOptions.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.Embeddings_String").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.EmbeddingsResponse.initialize(context, result);
	}
	/**
	 * Creates new EmbeddingsOptions.
	 */
	public static genaicommons.proxies.EmbeddingsOptions embeddingsOptions_Create(IContext context, java.lang.Long _dimensions)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Dimensions", _dimensions);
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.EmbeddingsOptions_Create").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.EmbeddingsOptions.initialize(context, result);
	}
	/**
	 * Gets the First Vector from the Response.
	 */
	public static java.lang.String embeddingsResponse_GetFirstVector(IContext context, genaicommons.proxies.EmbeddingsResponse _embeddingsResponse)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("EmbeddingsResponse", _embeddingsResponse == null ? null : _embeddingsResponse.getMendixObject());
		return (java.lang.String) Core.microflowCall("GenAICommons.EmbeddingsResponse_GetFirstVector").withParams(params).execute(context);
	}
	/**
	 * Microflow can be used to add a File to a FileCollection. The File Collection is an optional part of the input structure for the main operations.
	 */
	public static void fileCollection_AddFile(IContext context, genaicommons.proxies.FileCollection _fileCollection, java.lang.String _uRL, system.proxies.FileDocument _fileDocument, genaicommons.proxies.ENUM_FileType _eNUM_FileType, java.lang.String _textContent)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("FileCollection", _fileCollection == null ? null : _fileCollection.getMendixObject());
		params.put("URL", _uRL);
		params.put("FileDocument", _fileDocument == null ? null : _fileDocument.getMendixObject());
		params.put("ENUM_FileType", _eNUM_FileType == null ? null : _eNUM_FileType.name());
		params.put("TextContent", _textContent);
		Core.microflowCall("GenAICommons.FileCollection_AddFile").withParams(params).execute(context);
	}
	/**
	 * Microflow can be used to create a File Collection and add the first File to it immediately. The File Collection is an optional part of the input for the main operations.
	 */
	public static genaicommons.proxies.FileCollection fileCollection_CreateAndAddFile(IContext context, java.lang.String _uRL, system.proxies.FileDocument _fileDocument, genaicommons.proxies.ENUM_FileType _eNUM_FileType, java.lang.String _textContent)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("URL", _uRL);
		params.put("FileDocument", _fileDocument == null ? null : _fileDocument.getMendixObject());
		params.put("ENUM_FileType", _eNUM_FileType == null ? null : _eNUM_FileType.name());
		params.put("TextContent", _textContent);
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.FileCollection_CreateAndAddFile").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.FileCollection.initialize(context, result);
	}
	/**
	 * Creates a FileCollection for a given Message (if none already exists).
	 */
	public static genaicommons.proxies.FileCollection fileCollection_GetCreate(IContext context, genaicommons.proxies.Message _message)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Message", _message == null ? null : _message.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.FileCollection_GetCreate").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.FileCollection.initialize(context, result);
	}
	/**
	 * Creates a new FileContent with the given input. This will be added to an existing FileCollection of the given Message or a new FileCollection will be created.
	 */
	public static genaicommons.proxies.FileContent fileContent_Create_AddToMessage(IContext context, java.lang.String _fileExtension, java.lang.String _textContent, genaicommons.proxies.ENUM_ContentType _eNUM_FileContentType, genaicommons.proxies.ENUM_FileType _eNUM_FileType, java.lang.String _fileContent, genaicommons.proxies.Message _message)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("FileExtension", _fileExtension);
		params.put("TextContent", _textContent);
		params.put("ENUM_FileContentType", _eNUM_FileContentType == null ? null : _eNUM_FileContentType.name());
		params.put("ENUM_FileType", _eNUM_FileType == null ? null : _eNUM_FileType.name());
		params.put("FileContent", _fileContent);
		params.put("Message", _message == null ? null : _message.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.FileContent_Create_AddToMessage").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.FileContent.initialize(context, result);
	}
	/**
	 * Either a FileDocument or an URL needs to be provided. All available attributes are set an the FileContent is added to the FileCollection.
	 */
	public static void fileContent_SetAttributes(IContext context, genaicommons.proxies.FileContent _fileContent, genaicommons.proxies.FileCollection _fileCollection, system.proxies.FileDocument _fileDocument, genaicommons.proxies.ENUM_FileType _eNUM_FileType, java.lang.String _uRL, java.lang.String _textContent)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("FileContent", _fileContent == null ? null : _fileContent.getMendixObject());
		params.put("FileCollection", _fileCollection == null ? null : _fileCollection.getMendixObject());
		params.put("FileDocument", _fileDocument == null ? null : _fileDocument.getMendixObject());
		params.put("ENUM_FileType", _eNUM_FileType == null ? null : _eNUM_FileType.name());
		params.put("URL", _uRL);
		params.put("TextContent", _textContent);
		Core.microflowCall("GenAICommons.FileContent_SetAttributes").withParams(params).execute(context);
	}
	/**
	 * Can be used to convert FileContent to a given image (based on the ContentType from base64 or an URL). If the file name is empty, the name will be set to "image.png". If the FileContent contains a FileExtension, this will be used instead.
	 */
	public static void image_ConvertToFile_Single(IContext context, system.proxies.Image _imageToUse, genaicommons.proxies.FileContent _fileContent)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ImageToUse", _imageToUse == null ? null : _imageToUse.getMendixObject());
		params.put("FileContent", _fileContent == null ? null : _fileContent.getMendixObject());
		Core.microflowCall("GenAICommons.Image_ConvertToFile_Single").withParams(params).execute(context);
	}
	/**
	 * This microflow can be used to create an ImageOptions object to be used in image generation operations.
	 */
	public static genaicommons.proxies.ImageOptions imageOptions_Create(IContext context, java.lang.Long _height, java.lang.Long _width, java.lang.Long _numberOfImages)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Height", _height);
		params.put("Width", _width);
		params.put("NumberOfImages", _numberOfImages);
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.ImageOptions_Create").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.ImageOptions.initialize(context, result);
	}
	/**
	 * Get or creates an ImageOptions object. Can be used to set default settings for ImageOptions if none was passed.
	 */
	public static genaicommons.proxies.ImageOptions imageOptions_GetCreate(IContext context, genaicommons.proxies.ImageOptions _imageOptions, java.lang.Long _height, java.lang.Long _width, java.lang.Long _numberOfImages)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ImageOptions", _imageOptions == null ? null : _imageOptions.getMendixObject());
		params.put("Height", _height);
		params.put("Width", _width);
		params.put("NumberOfImages", _numberOfImages);
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.ImageOptions_GetCreate").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.ImageOptions.initialize(context, result);
	}
	public static void inputModality_Commit(IContext context, genaicommons.proxies.InputModality _inputModality)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("InputModality", _inputModality == null ? null : _inputModality.getMendixObject());
		Core.microflowCall("GenAICommons.InputModality_Commit").withParams(params).execute(context);
	}
	/**
	 * Gets or creates an input modality object for the given model modality.
	 * If a new object is created it is also committed to the database.
	 */
	public static genaicommons.proxies.InputModality inputModality_GetCreate(IContext context, genaicommons.proxies.ENUM_ModelModality _eNUM_ModelModality)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ENUM_ModelModality", _eNUM_ModelModality == null ? null : _eNUM_ModelModality.name());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.InputModality_GetCreate").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.InputModality.initialize(context, result);
	}
	/**
	 * Adds a Message to the Response (if none already exists).
	 */
	public static genaicommons.proxies.Message message_GetCreate_Response(IContext context, genaicommons.proxies.Response _response, genaicommons.proxies.ENUM_MessageType _eNUM_MessageType, genaicommons.proxies.ENUM_MessageRole _eNUM_MessageRole)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Response", _response == null ? null : _response.getMendixObject());
		params.put("ENUM_MessageType", _eNUM_MessageType == null ? null : _eNUM_MessageType.name());
		params.put("ENUM_MessageRole", _eNUM_MessageRole == null ? null : _eNUM_MessageRole.name());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.Message_GetCreate_Response").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.Message.initialize(context, result);
	}
	/**
	 * Creates a Metadata object with the given Value and Key.
	 */
	public static genaicommons.proxies.Metadata metadata_Create(IContext context, java.lang.String _key, java.lang.String _value)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Key", _key);
		params.put("Value", _value);
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.Metadata_Create").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.Metadata.initialize(context, result);
	}
	/**
	 * Gets a Metadata object in a given list (identified by Key and Value). If none was found, it will be created with the parameters and added to the list. The (found or created) Metadata object is returned.
	 */
	public static genaicommons.proxies.Metadata metadata_GetCreate(IContext context, java.util.List<genaicommons.proxies.Metadata> _metadataList, java.lang.String _key, java.lang.String _value)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.List<IMendixObject> listparam_metadataList = null;
		if (_metadataList != null)
		{
			listparam_metadataList = new java.util.ArrayList<>();
			for (var obj : _metadataList) {
				listparam_metadataList.add(obj.getMendixObject());
			}
		}
		params.put("MetadataList", listparam_metadataList);

		params.put("Key", _key);
		params.put("Value", _value);
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.Metadata_GetCreate").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.Metadata.initialize(context, result);
	}
	/**
	 * This will get or create a MetadataCollection for a given KnowledgeBaseChunk. Additionally, it will get or create a Metadata object for the MetadataList and add it to the MetadataCollection.
	 */
	public static void metadata_GetCreate_AddToKnowledgeBaseChunk(IContext context, genaicommons.proxies.KnowledgeBaseChunk _knowledgeBaseChunk, java.lang.String _key, java.lang.String _value, java.util.List<genaicommons.proxies.Metadata> _metadataList)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("KnowledgeBaseChunk", _knowledgeBaseChunk == null ? null : _knowledgeBaseChunk.getMendixObject());
		params.put("Key", _key);
		params.put("Value", _value);
		java.util.List<IMendixObject> listparam_metadataList = null;
		if (_metadataList != null)
		{
			listparam_metadataList = new java.util.ArrayList<>();
			for (var obj : _metadataList) {
				listparam_metadataList.add(obj.getMendixObject());
			}
		}
		params.put("MetadataList", listparam_metadataList);

		Core.microflowCall("GenAICommons.Metadata_GetCreate_AddToKnowledgeBaseChunk").withParams(params).execute(context);
	}
	/**
	 * Adds a new Metadata object to a given MetadataCollection. Use MetadataCollection_CreateAndAddMetadata to first create the collection.
	 */
	public static void metadataCollection_AddMetadata(IContext context, java.lang.String _key, java.lang.String _value, genaicommons.proxies.MetadataCollection _metadataCollection)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Key", _key);
		params.put("Value", _value);
		params.put("MetadataCollection", _metadataCollection == null ? null : _metadataCollection.getMendixObject());
		Core.microflowCall("GenAICommons.MetadataCollection_AddMetadata").withParams(params).execute(context);
	}
	/**
	 * Creates a new MetadataCollection and adds a new Metadata. The MetadataCollection will be returned. To add additional Metadata, use MetadataCollection_AddMetadata.
	 */
	public static genaicommons.proxies.MetadataCollection metadataCollection_CreateAndAddMetadata(IContext context, java.lang.String _key, java.lang.String _value)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Key", _key);
		params.put("Value", _value);
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.MetadataCollection_CreateAndAddMetadata").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.MetadataCollection.initialize(context, result);
	}
	/**
	 * This will get or create a MetadataCollection for a given KnowledgeBaseChunk. 
	 */
	public static genaicommons.proxies.MetadataCollection metadataCollection_GetCreate(IContext context, genaicommons.proxies.KnowledgeBaseChunk _knowledgeBaseChunk)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("KnowledgeBaseChunk", _knowledgeBaseChunk == null ? null : _knowledgeBaseChunk.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.MetadataCollection_GetCreate").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.MetadataCollection.initialize(context, result);
	}
	/**
	 * Microflow can be used to add a message to the Request object. The calling of this operation should happen in the correct order so that the messages are sent chronologically.
	 */
	public static void request_AddMessage(IContext context, genaicommons.proxies.Request _request, genaicommons.proxies.ENUM_MessageRole _eNUM_MessageRole, genaicommons.proxies.FileCollection _fileCollection, java.lang.String _contentString)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Request", _request == null ? null : _request.getMendixObject());
		params.put("ENUM_MessageRole", _eNUM_MessageRole == null ? null : _eNUM_MessageRole.name());
		params.put("FileCollection", _fileCollection == null ? null : _fileCollection.getMendixObject());
		params.put("ContentString", _contentString);
		Core.microflowCall("GenAICommons.Request_AddMessage").withParams(params).execute(context);
	}
	public static genaicommons.proxies.Message request_AddMessage_Tool(IContext context, genaicommons.proxies.Request _request, genaicommons.proxies.ENUM_MessageRole _eNUM_MessageRole, genaicommons.proxies.FileCollection _fileCollection, java.util.List<genaicommons.proxies.ToolCall> _toolCallList, java.lang.String _toolCallId, java.lang.String _contentString)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Request", _request == null ? null : _request.getMendixObject());
		params.put("ENUM_MessageRole", _eNUM_MessageRole == null ? null : _eNUM_MessageRole.name());
		params.put("FileCollection", _fileCollection == null ? null : _fileCollection.getMendixObject());
		java.util.List<IMendixObject> listparam_toolCallList = null;
		if (_toolCallList != null)
		{
			listparam_toolCallList = new java.util.ArrayList<>();
			for (var obj : _toolCallList) {
				listparam_toolCallList.add(obj.getMendixObject());
			}
		}
		params.put("ToolCallList", listparam_toolCallList);

		params.put("ToolCallId", _toolCallId);
		params.put("ContentString", _contentString);
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.Request_AddMessage_Tool").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.Message.initialize(context, result);
	}
	/**
	 * This microflow can be used to add an additional stop sequence to the request
	 */
	public static void request_AddStopSequence(IContext context, genaicommons.proxies.Request _request, java.lang.String _stopSequence)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Request", _request == null ? null : _request.getMendixObject());
		params.put("StopSequence", _stopSequence);
		Core.microflowCall("GenAICommons.Request_AddStopSequence").withParams(params).execute(context);
	}
	/**
	 * This microflow can be used to create a request. This is the main request object that contains the functional input for the model to generate a response
	 */
	public static genaicommons.proxies.Request request_Create(IContext context, java.lang.String _systemPrompt, java.math.BigDecimal _temperature, java.lang.Long _maxTokens, java.math.BigDecimal _topP)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SystemPrompt", _systemPrompt);
		params.put("Temperature", _temperature);
		params.put("MaxTokens", _maxTokens);
		params.put("TopP", _topP);
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.Request_Create").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.Request.initialize(context, result);
	}
	public static genaicommons.proxies.Request request_GetCreate(IContext context, genaicommons.proxies.Request _request)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Request", _request == null ? null : _request.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.Request_GetCreate").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.Request.initialize(context, result);
	}
	public static genaicommons.proxies.Message request_GetLastAssistantMessage(IContext context, genaicommons.proxies.Request _request)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Request", _request == null ? null : _request.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.Request_GetLastAssistantMessage").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.Message.initialize(context, result);
	}
	/**
	 * Use this microflow to set the ToolChoice. This controls which (if any) function is called by the model.
	 * If the ENUM_ToolChoice equals 'tool', the Tool input is required.
	 * - none means the model will not call a function and instead generates a text response.
	 * - auto means the model can pick between generating a message or calling a function.
	 * - tool means that a particular tool needs to be called, which is the one specified over association ToolCollection_ToolChoice.
	 * - any means that any function will be called. Not available for all providers and might be changed to auto.
	 */
	public static void request_SetToolChoice(IContext context, genaicommons.proxies.Request _request, genaicommons.proxies.Tool _tool, genaicommons.proxies.ENUM_ToolChoice _eNUM_ToolChoice)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Request", _request == null ? null : _request.getMendixObject());
		params.put("Tool", _tool == null ? null : _tool.getMendixObject());
		params.put("ENUM_ToolChoice", _eNUM_ToolChoice == null ? null : _eNUM_ToolChoice.name());
		Core.microflowCall("GenAICommons.Request_SetToolChoice").withParams(params).execute(context);
	}
	/**
	 * Creates a FileContent for a Response. This creates a message (if none exists), a FileCollection for the Message (if none exists) and adds a new FileContent to the FileCollection.
	 * 
	 * Usually to be used in an Import Mapping where the attribute FileContent is set during the import (FileContent will not be set in this operation). Apply post-processing to the FileContent after calling this microflow (for example to set the ContentType).
	 */
	public static genaicommons.proxies.FileContent response_CreateFileContent(IContext context, genaicommons.proxies.Response _response)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Response", _response == null ? null : _response.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.Response_CreateFileContent").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.FileContent.initialize(context, result);
	}
	/**
	 * This microflow can be used to get the model response text from the response structure returned from the main operation.
	 */
	public static java.lang.String response_GetModelResponseString(IContext context, genaicommons.proxies.Response _response)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Response", _response == null ? null : _response.getMendixObject());
		return (java.lang.String) Core.microflowCall("GenAICommons.Response_GetModelResponseString").withParams(params).execute(context);
	}
	/**
	 * This microflow can be used to retrieve the references for a given model response. These indicate what the model response was based on, according to the model logic.
	 */
	public static java.util.List<genaicommons.proxies.Reference> response_GetReferences(IContext context, genaicommons.proxies.Response _response)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Response", _response == null ? null : _response.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("GenAICommons.Response_GetReferences").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> genaicommons.proxies.Reference.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static genaicommons.proxies.Response response_GetSelf(IContext context, genaicommons.proxies.Response _response)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Response", _response == null ? null : _response.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.Response_GetSelf").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.Response.initialize(context, result);
	}
	public static genaicommons.proxies.Function tool_CastTo_Function(IContext context, genaicommons.proxies.Tool _tool)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Tool", _tool == null ? null : _tool.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.Tool_CastTo_Function").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.Function.initialize(context, result);
	}
	public static genaicommons.proxies.KnowledgeBaseRetrieval tool_CastTo_KnowledgeBaseRetrieval(IContext context, genaicommons.proxies.Tool _tool)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Tool", _tool == null ? null : _tool.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.Tool_CastTo_KnowledgeBaseRetrieval").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.KnowledgeBaseRetrieval.initialize(context, result);
	}
	public static genaicommons.proxies.Tool tool_GetSelf(IContext context, genaicommons.proxies.Tool _tool)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Tool", _tool == null ? null : _tool.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.Tool_GetSelf").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.Tool.initialize(context, result);
	}
	/**
	 * Can be used in tool microflows to get the ToolCall based on the Request and Tool.
	 */
	public static genaicommons.proxies.ToolCall tool_Request_GetToolCall(IContext context, genaicommons.proxies.Request _request, genaicommons.proxies.Tool _tool)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Request", _request == null ? null : _request.getMendixObject());
		params.put("Tool", _tool == null ? null : _tool.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.Tool_Request_GetToolCall").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.ToolCall.initialize(context, result);
	}
	public static genaicommons.proxies.ToolCall toolCall_GetSelf(IContext context, genaicommons.proxies.ToolCall _toolCall)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ToolCall", _toolCall == null ? null : _toolCall.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("GenAICommons.ToolCall_GetSelf").withParams(params).execute(context);
		return result == null ? null : genaicommons.proxies.ToolCall.initialize(context, result);
	}
	public static void toolCall_ProcessAndExecuteTool(IContext context, genaicommons.proxies.ToolCall _toolCall, java.util.List<genaicommons.proxies.Tool> _toolList, genaicommons.proxies.Request _request)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ToolCall", _toolCall == null ? null : _toolCall.getMendixObject());
		java.util.List<IMendixObject> listparam_toolList = null;
		if (_toolList != null)
		{
			listparam_toolList = new java.util.ArrayList<>();
			for (var obj : _toolList) {
				listparam_toolList.add(obj.getMendixObject());
			}
		}
		params.put("ToolList", listparam_toolList);

		params.put("Request", _request == null ? null : _request.getMendixObject());
		Core.microflowCall("GenAICommons.ToolCall_ProcessAndExecuteTool").withParams(params).execute(context);
	}
	/**
	 * Use this microflow to create and store the Usage object based on the EmbeddingsReponse in the Embeddings Operations that follow the principles of GenAI Commons.
	 * 
	 * The Deploymentidentifier string must be constructed in a custom way for the connector, so that end-users can distinguish between applicable deployments/models.
	 * 
	 * The EmbeddingsResponse must have the following fields populated:
	 * -DurationMilliseconds: the duration of the technical part of the call to the LLM provider (excluding pre/post processing)
	 * -InputTokens: the number of input tokens
	 * -TotalTokens: the number of total tokens, for embeddings operations this is typically identical to the input since output token usage is not applicable.
	 * 
	 * 
	 */
	public static void usage_Create_Embeddings(IContext context, genaicommons.proxies.EmbeddingsResponse _embeddingsResponse, genaicommons.proxies.DeployedModel _deployedModel)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("EmbeddingsResponse", _embeddingsResponse == null ? null : _embeddingsResponse.getMendixObject());
		params.put("DeployedModel", _deployedModel == null ? null : _deployedModel.getMendixObject());
		Core.microflowCall("GenAICommons.Usage_Create_Embeddings").withParams(params).execute(context);
	}
	/**
	 * Use this microflow to create and store the Usage object based on the Reponse object in the chat completions operations that follow the principles of GenAI Commons.
	 * If you're using the Request_Process java action in your connector, you should not add this microflow again. The java action already takes care of storing token usage metrics.
	 * 
	 * The Deploymentidentifier string must be constructed in a custom way for the connector, so that end-users can distinguish between LLM provider/architecture and applicable deployments/models.
	 * 
	 * The Response must have the following fields populated:
	 * -DurationMilliseconds: the duration of the technical part of the call to the LLM provider (excluding pre/post processing).
	 * -InputTokens: the number of input tokens.
	 * -OutputTokens: the number of output tokens.
	 * -TotalTokens: the number of total tokens (typically input + output).
	 */
	public static void usage_Create_TextAndFiles(IContext context, genaicommons.proxies.Response _response, genaicommons.proxies.DeployedModel _deployedModel)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Response", _response == null ? null : _response.getMendixObject());
		params.put("DeployedModel", _deployedModel == null ? null : _deployedModel.getMendixObject());
		Core.microflowCall("GenAICommons.Usage_Create_TextAndFiles").withParams(params).execute(context);
	}
}
